### YamlMime:Tutorial
title: Manipuler les nombres intégraux et à virgule flottante en C#
metadata:
  title: Nombres en C# – Tutoriel interactif d’introduction à C#
  description: Dans ce didacticiel sur les types numériques, vous allez utiliser votre navigateur pour découvrir C# de manière interactive. Vous allez écrire un code C# et afficher les résultats de la compilation et de l’exécution du code directement dans le navigateur.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Branches et boucles en C#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 31647906dd3e1286220077831d2ce90b65a5b73c
  ms.sourcegitcommit: 559259da2738a7b33a46c0130e51d336091c2097
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 10/22/2019
  ms.locfileid: "72774010"
items:
- durationInMinutes: 1
  content: >
    Ce tutoriel vous fait découvrir les types numériques en C# de manière interactive en utilisant votre navigateur pour écrire du code C# et afficher les résultats de la compilation et de l’exécution. Il contient une série de leçons pour explorer les nombres et les opérations mathématiques en C#. Ces leçons présentent les concepts de base du langage C#.
- title: Explorer les mathématiques avec des entiers
  durationInMinutes: 4
  content: >
    Exécutez le code suivant dans la fenêtre interactive. Pour ce faire, tapez le bloc de code suivant dans la fenêtre interactive et cliquez sur le bouton **Exécuter** :


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Si vous exécutez cette procédure sur votre environnement, vous devez suivre les instructions relatives à la [version locale](numbers-in-csharp-local.md) .


    Vous venez d’observer l’une des opérations mathématiques de base avec des entiers. Le type `int` représente un **entier**, qui peut être positif ou négatif. Vous utilisez le symbole `+` pour effectuer une addition. Les autres opérations mathématiques courantes avec des entiers sont les suivantes :


    - `-` pour la soustraction

    - `*` pour la multiplication

    - `/` pour la division


    > [!TIP]

    > Vous pouvez explorer le contenu de ce tutoriel interactif à votre rythme en modifiant le code que vous avez écrit dans la fenêtre interactive. Il fournit des exemples que vous pouvez mettre en pratique à chaque étape.


    Commencez par explorer ces différentes opérations. Modifiez la troisième ligne pour tester chacune de ces opérations. Après chaque modification, cliquez sur le bouton **Exécuter**.


    Soustraction :


    ```csharp

    int c = a - b;

    ```


    Multiplication :


    ```csharp

    int c = a * b;

    ```


    Division :


    ```csharp

    int c = a / b;

    ```


    Vous pouvez également, si vous le souhaitez, effectuer des essais en réalisant plusieurs opérations mathématiques dans la même ligne.


    > [!TIP]

    > Durant votre exploration de C# (ou de tout autre langage de programmation), vous commettrez des erreurs d’écriture du code. Le **compilateur** détectera ces erreurs et vous les signalera. Si la sortie contient des messages d’erreur, vérifiez attentivement l’exemple de code ainsi que le code dans la fenêtre interactive pour identifier les corrections à apporter.

    > Cet exercice vous aidera à mieux comprendre la structure du code C#.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Explorer l’ordre des opérations
  durationInMinutes: 7
  content: >
    Le langage C# définit la priorité des différentes opérations mathématiques avec à l’aide de règles cohérentes avec les règles mathématiques que vous avez apprises.

    La multiplication et la division ont priorité sur l’addition et la soustraction.

    Explorez cet ordre de priorité en exécutant le code suivant dans la fenêtre interactive :


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    La sortie montre que la multiplication est effectuée avant l’addition.


    Vous pouvez appliquer un ordre de calcul différent en mettant entre parenthèses la ou les opérations à exécuter en premier :


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Pratiquez en combinant plusieurs opérations différentes. Remplacez la quatrième ligne ci-dessus par un contenu similaire à ce qui suit :


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Vous avez peut-être observé un comportement intéressant des entiers. La division d’entiers produit toujours un résultat entier, même quand vous pensez que le résultat devrait inclure une partie décimale ou fractionnaire.


    Si vous n’avez pas observé ce comportement, essayez ce qui suit :


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Cliquez de nouveau sur **Exécuter** pour afficher les résultats.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Explorer la précision et les limites des entiers
  durationInMinutes: 5
  content: >
    Ce dernier exemple a montré que la division d’entiers tronque le résultat.

    Vous pouvez obtenir le **reste** à l’aide de l’opérateur **modulo**, à savoir le caractère `%` :


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    Le type d’entier C# diffère des entiers mathématiques d’une autre manière : le type `int` a des limites minimale et maximale. Exécutez ce code dans la fenêtre interactive pour afficher ces limites :


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Si un calcul produit une valeur qui dépasse ces limites, vous obtenez une condition de **dépassement négatif** ou **dépassement positif**. La réponse affichée indique la plage (d’une limite à l’autre). Ajoutez ces deux lignes dans la fenêtre interactive pour afficher un exemple :


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Notez que la réponse est très proche de l’entier minimal (négatif). Il en est de même pour `min + 2`.

    L’addition a produit un **dépassement négatif** des valeurs autorisées pour les entiers.

    La réponse est un très grand nombre négatif, car un dépassement négatif « inclut » de la plus grande valeur d’entier possible à la plus petite.


    Il existe d’autres types numériques avec une précision et des limites différentes que vous pouvez utiliser quand le type `int` ne répond pas à vos besoins. Nous les explorerons à l’étape suivante.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Utiliser le type double
  durationInMinutes: 5
  content: >
    Le type numérique `double` représente un nombre à virgule flottante double précision. Ces termes vous sont peut-être inconnus. Un nombre **à virgule flottante** est utile pour représenter de très grands ou petits nombres non intégraux. La **double précision** signifie que ces nombres sont stockés avec une précision supérieure à la **simple précision**. Sur les ordinateurs modernes, les nombres double précision sont généralement plus utilisés que les nombres simple précision.

    Explorons ce type double. Exécutez le code suivant dans la fenêtre interactive et observez le résultat :


    ```csharp

    double a = 5;

    double b = 4;

    double c = 2;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Notez que la réponse inclut la partie décimale du quotient. Essayez avec une expression légèrement plus complexe utilisant des doubles :


    ```csharp

    double a = 19;

    double b = 23;

    double c = 8;

    double d = (a + b) / c;

    Console.WriteLine(d);

    ```


    La plage d’une valeur double est nettement supérieure à celle de valeurs entières. Exécutez le code suivant dans la fenêtre interactive :


    ```csharp

    double max = double.MaxValue;

    double min = double.MinValue;

    Console.WriteLine($"The range of double is {min} to {max}");

    ```


    Ces valeurs s’affichent sous forme de notation scientifique. Le nombre à gauche du `E` est le nombre significatif. Le nombre à droite est l’exposant, en puissance de 10.


    Tout comme les nombres décimaux en mathématiques, les doubles en C# peuvent présenter des erreurs d’arrondi. Exécutez le code suivant :


    ```csharp

    double third = 1.0 / 3.0;

    Console.WriteLine(third);

    ```


    Vous savez que la valeur extensible `0.3` ne correspond pas exactement à `1/3`.


    ***Test***


    Effectuez d’autres calculs avec des grands nombres, des petits nombres, des multiplications et des divisions à l’aide du type `double`.  Effectuez des calculs plus complexes.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Utiliser des types de virgule fixe
  durationInMinutes: 8
  content: >
    Vous avez vu les types numériques de base en C#, à savoir les entiers et les doubles.  Il existe un autre type à découvrir : le type `decimal`. Le type `decimal` a une plage plus petite, mais une précision supérieure à celle du type `double`. Le terme **virgule fixe** signifie que la virgule décimale (ou virgule binaire) ne se déplace pas. Étudions cela d’un peu plus près :


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Notez que la plage est plus petite que celle du type `double`. Vous pouvez observer la plus haute précision du type décimal en exécutant le code suivant :


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    Le suffixe `M` des nombres permet d’indiquer comment une constante doit utiliser le type `decimal`.


    Notez que le calcul utilisant le type décimal a plus de chiffres à droite de la virgule décimale.


    ***Test***


    Maintenant que vous avez vu les différents types numériques, écrivez du code qui calcule la surface d’un cercle avec un rayon de 2,5 centimètres. Rappelez-vous que la surface d’un cercle est le rayon au carré multiplié par PI. Conseil : .NET contient une constante pour PI, à savoir <xref:System.Math.PI?displayProperty=nameWithType>, que vous pouvez utiliser pour cette valeur.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).


    Vous devriez obtenir une réponse comprise entre 19 et 20.
- title: Terminer le test
  durationInMinutes: 1
  content: >
    Avez-vous obtenu un résultat similaire à celui-ci ?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Si vous le voulez, essayez d’autres formules.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- content: >
    Vous avez terminé le tutoriel interactif « Nombres en C# ». Vous pouvez cliquer sur le lien **Branches et boucles** ci-dessous pour commencer le tutoriel interactif suivant, ou bien consulter le [site .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) pour télécharger le kit SDK .NET Core, créer un projet sur votre ordinateur et continuer à coder. La section « étapes suivantes » vous ramène à ces didacticiels.


    Pour en savoir plus sur les nombres en C#, consultez les rubriques suivantes :


    - [Types numériques intégraux](../../language-reference/builtin-types/integral-numeric-types.md)

    - [Types numériques à virgule flottante](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [Conversions numériques intégrées](../../language-reference/builtin-types/numeric-conversions.md)
