### YamlMime:Tutorial
title: Hello World - Présentation de C# - Tutoriel interactif
metadata:
  title: Hello World - Présentation de C# - Tutoriel interactif
  description: Dans ce didacticiel, vous allez utiliser votre navigateur pour découvrir C# de manière interactive. Vous allez écrire un code C# et afficher les résultats de la compilation et de l’exécution du code directement dans le navigateur.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Nombres en C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 36254062835b9ab70ba470f6286b7515003dec11
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850799"
items:
- durationInMinutes: 1
  content: >
    Ce didacticiel vous explique comment utiliser C# de manière interactive à l’aide de votre navigateur et afficher les résultats de la compilation et de l’exécution de votre code. Il contient une série de leçons qui commencent par un programme « Hello World ». Ces leçons présentent les concepts de base du langage C#.
- title: Exécuter votre premier programme C#
  durationInMinutes: 2
  content: >
    Exécutez le code suivant dans la fenêtre interactive. Pour ce faire, tapez le bloc de code suivant dans la fenêtre interactive et cliquez sur le bouton **Exécuter** :


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Félicitations ! Vous avez exécuté votre premier programme C#. Il s’agit d’un programme simple qui affiche le message « Hello World! ». Il a utilisé la méthode <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> pour afficher ce message. `Console` est un type qui représente la fenêtre de console. `WriteLine` est une méthode du type `Console` qui affiche une ligne de texte sur cette console de texte.


    Poursuivons notre exploration. Le reste de cette leçon explore l’utilisation du type `string`, qui représente du texte en C#. À l’instar du type `Console`, le type `string` propose différentes méthodes. La méthode `string` fonctionne avec du texte.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Déclarer et utiliser des variables
  durationInMinutes: 3
  content: >
    Votre premier programme a affiché la `string` « Hello World! » à l’écran.


    > [!TIP]

    > Durant votre exploration de C# (ou de tout autre langage de programmation), vous commettrez des erreurs d’écriture du code. Le **compilateur** détectera ces erreurs et vous les signalera. Si la sortie contient des messages d’erreur, vérifiez attentivement l’exemple de code ainsi que le code dans la fenêtre interactive pour identifier les corrections à apporter.

    > Cet exercice vous aidera à mieux comprendre la structure du code C#.


    Votre premier programme est limité à l’affichage d’un seul message. Vous pouvez écrire d’autres programmes plus utiles à l’aide de **variables**. Une **variable** est un symbole que vous pouvez utiliser pour exécuter le même code avec des valeurs différentes. Pratiquons ensemble ! Remplacez le code que vous avez écrit dans la fenêtre interactive par le code suivant :


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    La première ligne déclare une variable, `aFriend`, et lui assigne une valeur, « Bill ». La deuxième ligne affiche le nom.


    Vous pouvez assigner des valeurs différentes à toute variable que vous déclarez. Vous pouvez remplacer le nom par celui d’un de vos amis. Dans la fenêtre interactive, ajoutez ces deux lignes après le code que vous avez déjà ajouté :


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Notez que la même ligne de code affiche deux messages différents, selon la valeur stockée dans la variable `aFriend`.


    Vous avez peut-être également remarqué que le mot « Hello » manque dans les deux derniers messages. Nous allons résoudre ce problème maintenant.  Modifiez les lignes qui affichent le message comme suit :


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Cliquez de nouveau sur **Exécuter** pour afficher les résultats.


    Vous avez utilisé `+` pour générer des chaînes à partir de chaînes **variables** et **constantes**. Il existe une meilleure façon de procéder.

    Vous pouvez placer une variable entre les caractères `{` et `}` pour indiquer à C# de remplacer ce texte par la valeur de la variable.


    Cela s’appelle [l’interpolation de chaîne](../../language-reference/tokens/interpolated.md).


    Si vous ajoutez un `$` avant le guillemet ouvrant de la chaîne, vous pouvez ajouter des variables, comme `aFriend`, entre accolades dans la chaîne. Essayez :



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Cliquez de nouveau sur **Exécuter** pour afficher les résultats. Au lieu de « Hello {aFriend} », le message doit être « Hello Maira ».


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Utiliser des chaînes
  durationInMinutes: 5
  content: >
    Votre dernière modification a été notre introduction à ce que vous pouvez faire avec des chaînes. Poursuivons notre exploration.


    Vous n’êtes pas limité à une seule variable entre les accolades. Écrivez ce code :


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    À mesure que vous en apprenez plus sur les chaînes, vous comprendrez que des chaînes sont davantage qu’un ensemble de lettres. Vous pouvez trouver la longueur d’une chaîne en utilisant `Length`. `Length` est une **propriété** de chaîne qui retourne le nombre de caractères de la chaîne. Ajoutez le code suivant en bas de la fenêtre interactive :


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > L’heure est venue d’explorer par vous-même. Vous avez appris que `Console.WriteLine()` écrit du texte dans l’écran. Vous avez également appris à déclarer des variables et à concaténer des chaînes. Pratiquez à votre gré dans la fenêtre interactive. La fenêtre possède une fonctionnalité appelée **IntelliSense** qui fournit des suggestions sur les opérations réalisables. Tapez un `.` après le `d` dans `firstFriend`. Vous verrez une liste de suggestions pour les propriétés et méthodes que vous pouvez utiliser.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Autres méthodes de chaînes
  durationInMinutes: 5
  content: >
    Vous utilisez une **méthode**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>, pour afficher les messages. Une **méthode** est un bloc de code qui implémente une action. Elle porte un nom pour vous permettre d’y accéder facilement.


    Supposons que vos chaînes ont des espaces au début ou à la fin que vous ne souhaitez pas afficher. Vous souhaitez **supprimer** les espaces dans les chaînes.

    La méthode <xref:System.String.Trim%2A> ainsi que les méthodes associées <xref:System.String.TrimStart%2A> et <xref:System.String.TrimEnd%2A> exécutent ce travail. Vous pouvez simplement utiliser ces méthodes pour supprimer les espaces de début et de fin. Exécutez le code suivant :


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Cet exemple met en avant quelques concepts importants concernant l’utilisation de chaînes. Les méthodes utilisant des chaînes retournent des objets de chaîne au lieu d’apporter des modifications. Vous pouvez observer que chaque appel à une méthode `Trim` retourne une nouvelle chaîne, mais que le message d’origine n’est pas modifié.


    Il existe d’autres méthodes disponibles pour utiliser des chaînes. Par exemple, vous avez probablement déjà utilisé une commande de recherche et remplacement dans un éditeur ou un traitement de texte. La méthode <xref:System.String.Replace%2A> fonctionne de manière similaire dans une chaîne. Elle recherche une sous-chaîne et la remplace par un autre texte. La méthode <xref:System.String.Replace%2A> accepte deux **paramètres**. Il s’agit des chaînes entre parenthèses. La première chaîne correspond au texte à rechercher. La deuxième chaîne correspond au texte qui le remplacera. Essayez par vous-même. Ajoutez ce code. Tapez-le pour afficher les conseils lorsque vous commencez à taper `.Re` après la variable `sayHello` :


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Deux autres méthodes utiles permettent de mettre une chaîne tout en majuscules ou en minuscules. Essayez le code suivant. Tapez-le pour voir comment **IntelliSense** fournit des conseils lorsque vous commencez à taper `To` :


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Rechercher des chaînes
  durationInMinutes: 10
  content: >
    L’autre partie d’une opération de *recherche et remplacement* consiste à rechercher du texte dans une chaîne. Vous pouvez utiliser la méthode <xref:System.String.Contains%2A> pour effectuer des recherches. Elle vous indique si une chaîne contient une sous-chaîne. Exécutez le code suivant pour explorer <xref:System.String.Contains%2A> :


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    La méthode <xref:System.String.Contains%2A> retourne une valeur **booléenne** qui indique si la chaîne recherchée a été trouvée. Un **booléen** stocke une valeur `true` ou `false`. Vous en saurez plus sur les valeurs **booléennes** dans une leçon ultérieure.


    ***Test***


    Il existe deux méthodes similaires, <xref:System.String.StartsWith%2A> et <xref:System.String.EndsWith%2A>, qui permettent également de rechercher des sous-chaînes dans une chaîne. Elles recherchent une sous-chaîne au début ou à la fin de la chaîne. Essayez de modifier l’exemple précédent pour utiliser <xref:System.String.StartsWith%2A> et <xref:System.String.EndsWith%2A> au lieu de <xref:System.String.Contains%2A>. Recherchez « You » ou « goodbye » au début d’une chaîne. Recherchez « hello » ou « goodbye » à la fin d’une chaîne.


    > [!NOTE]

    > Faites attention à la ponctuation quand vous recherchez du texte à la fin d’une chaîne. Si la chaîne se termine par un point, vous devez rechercher une chaîne qui se termine par un point.


    Vous devez obtenir `true` pour une chaîne commençant par « You » et se terminant par « hello », et false pour une chaîne commençant ou se terminant par « goodbye ».


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Terminer le test
  durationInMinutes: 3
  content: >
    Avez-vous obtenu un résultat similaire à celui-ci ?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- content: >
    Vous avez terminé la présentation du tutoriel C# « Hello C# ». Vous pouvez cliquer sur le lien **Nombres dans C#** ci-dessous pour démarrer le tutoriel interactif suivant, ou vous pouvez visiter le [site .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) pour télécharger le SDK .NET Core, créer un projet sur votre machine et continuer à coder. La section « étapes suivantes » vous ramène à ces didacticiels.


    Pour plus d’informations sur le type `string` :

    - Rubrique du [Guide de programmation C#](../../programming-guide/index.md) sur les [chaînes](../../programming-guide/strings/index.md).

    - [Conseils d’utilisation des chaînes](../../how-to/index.md#working-with-strings).
