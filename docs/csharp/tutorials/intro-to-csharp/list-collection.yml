### YamlMime:Tutorial
title: Apprenez à gérer les collections de données en utilisant le type de liste générique
metadata:
  title: Collections de données - Présentation du tutoriel interactif C#
  description: Dans ce didacticiel, vous allez utiliser votre navigateur pour découvrir C# de manière interactive. Vous allez écrire un code C# et afficher les résultats de la compilation et de l’exécution du code directement dans le navigateur.
  audience: Developer
  ms.custom: mvc
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: ed4c30146f07c5f2ec17f13ff852d83d6469a9b0
  ms.sourcegitcommit: 046a9c22487551360e20ec39fc21eef99820a254
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 05/14/2020
  ms.locfileid: "83396841"
items:
- durationInMinutes: 1
  content: >
    Ce didacticiel vous explique comment utiliser C# de manière interactive à l’aide de votre navigateur du code C# et afficher les résultats de la compilation et de l’exécution de votre code. Il contient une série de leçons sur la création, la modification et l’exploration de collections et tableaux.
- title: Créer des listes
  durationInMinutes: 2
  content: >
    Exécutez le code suivant dans la fenêtre interactive. Sélectionnez le bouton **entrer le mode Focus** . Ensuite, tapez le bloc de code suivant dans la fenêtre interactive (remplacez `<name>` par votre nom) et sélectionnez **exécuter**:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Si vous exécutez cette procédure sur votre environnement, vous devez suivre les instructions relatives à la [version locale](arrays-and-collections.md) .


    Vous avez créé une liste de chaînes, ajouté trois noms à cette liste et affiché les noms en majuscules. Vous utilisez des concepts que vous avez appris dans les tutoriels précédents pour lire la liste en boucle.


    Le code permettant d’afficher les noms utilise la fonctionnalité [d’interpolation de chaîne](../../language-reference/tokens/interpolated.md). Quand vous faites précéder une `string` du caractère `$`, vous pouvez incorporer le code C# dans la déclaration de chaîne. La chaîne réelle remplace ce code C# par la valeur qu’elle génère. Dans cet exemple, elle remplace `{name.ToUpper()}` par chaque nom, converti en majuscules, car vous avez appelé la méthode <xref:System.String.ToUpper%2A?displayProperty=nameWithType>.


    Continuons notre exploration.
- title: Modifier le contenu de la liste
  durationInMinutes: 3
  content: >
    La collection que vous avez créée utilise le type <xref:System.Collections.Generic.List%601>. Ce type stocke les séquences d’éléments. Vous spécifiez le type des éléments entre crochets angulaires.


    Un aspect important du type <xref:System.Collections.Generic.List%601> est qu’il peut augmenter ou diminuer, ce qui vous permet d’ajouter ou de supprimer des éléments. Vous pouvez afficher les résultats en modifiant le contenu une fois que vous l’avez affiché. Ajoutez le code suivant sous le code que vous avez déjà écrit (sous la boucle qui imprime le contenu) :


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Vous avez ajouté deux noms supplémentaires à la fin de la liste. Vous en avez également supprimé un. La sortie de ce bloc de code montre le contenu initial, puis imprime une ligne vide et le nouveau contenu.


    La <xref:System.Collections.Generic.List%601> vous permet en outre de faire référence à des éléments individuels par **index**. Vous accédez aux éléments à l’aide des jetons `[` et `]`. Ajoutez le code suivant sous ce que vous avez déjà écrit et effectuez un essai :


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Vous n’êtes pas autorisé à accéder au-delà de la fin de la liste. Vous pouvez vérifier la longueur de la liste à l’aide de la propriété <xref:System.Collections.Generic.List%601.Count%2A>. Ajoutez-y le code suivant pour effectuer un essai :


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Sélectionnez **exécuter** à nouveau pour afficher les résultats. En C#, les index commencent à partir de 0, de sorte que le plus grand index valide correspond au nombre d’éléments de la liste moins un.
- title: Trier les listes et y effectuer des recherches
  durationInMinutes: 5
  content: >
    Nos exemples utilisent des listes relativement petites, mais vos applications peuvent souvent générer des listes contenant beaucoup plus d’éléments, qui se comptent parfois même en milliers. Pour rechercher des éléments dans ces collections plus volumineuses, vous devez rechercher différents éléments dans la liste. La méthode <xref:System.Collections.Generic.List%601.IndexOf%2A> recherche un élément et retourne l’index de ce dernier. Si l’élément n’est pas dans la liste, `IndexOf` retourne `-1` . Essayez-la pour observer son fonctionnement.  Ajoutez le code suivant sous ce que vous avez écrit jusque-là :


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Étant donné que vous pouvez ne pas savoir si un élément figure dans la liste, vous devriez toujours vérifier l’index retourné par <xref:System.Collections.Generic.List%601.IndexOf%2A>. S’il indique -1, l’élément est introuvable.


    Il est également possible de trier les éléments de la liste. La <xref:System.Collections.Generic.List%601.Sort%2A> méthode trie tous les éléments de la liste dans l’ordre normal (par ordre alphabétique pour les chaînes). Ajoutez le code et exécutez-le de nouveau :


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```
- title: Listes d’autres types
  durationInMinutes: 5
  content: >
    Vous avez jusqu'à présent utilisé le type `string` dans les listes. Nous allons maintenant créer une <xref:System.Collections.Generic.List%601> en utilisant un autre type. Commençons par créer un ensemble de nombres. Supprimez le code que vous avez écrit jusqu’à présent et remplacez-le par le code suivant :


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Cela crée une liste d’entiers et définit les deux premiers entiers sur la valeur 1. La *séquence Fibonacci*, une séquence de nombres, commence par deux 1. Chaque nombre Fibonacci suivant correspond à la somme des deux nombres précédents. Ajoutez le code suivant :


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Cliquez sur **Exécuter** pour afficher les résultats.
- title: Test
  durationInMinutes: 10
  content: >
    Vérifiez si vous pouvez mettre en pratique certains des concepts appris ici et dans d’autres leçons antérieures. Approfondissez à partir de ce que vous avez créé jusqu'à présent avec les nombres de Fibonacci. Essayez d’écrire le code pour générer les 20 premiers nombres de la séquence. (Astuce, le 20ème nombre Fibonacci est 6765.)
- title: Terminer le test
  durationInMinutes: 3
  content: >
    Avez-vous obtenu un résultat similaire à celui-ci ?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    À chaque itération de la boucle, vous sélectionnez les deux derniers entiers de la liste, les additionner et ajoutez la valeur obtenue à la liste. La boucle se répète jusqu'à ce que vous ayez ajouté 20 éléments à la liste.
- content: >
    Vous avez terminé le tutoriel interactif sur les listes, qui terminait l’introduction du tutoriel interactif sur C#. Vous pouvez consulter le [site .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) pour télécharger le kit SDK .NET Core, créer un projet sur votre ordinateur et continuer à coder. La section « étapes suivantes » vous ramène à ces didacticiels.


    Pour plus d’informations sur les [collections .NET](../../../standard/collections/index.md), consultez les articles suivants :

    - [Sélectionner un type de collection](../../../standard/collections/selecting-a-collection-class.md)

    - [Types de collections couramment utilisés](../../../standard/collections/commonly-used-collection-types.md)

    - [Quand utiliser les collections génériques](../../../standard/collections/when-to-use-generic-collections.md)
