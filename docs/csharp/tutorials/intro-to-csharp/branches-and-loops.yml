### YamlMime:Tutorial
title: <span data-ttu-id="b233d-101">Découvrir la logique conditionnelle avec des instructions de branches et de boucles</span><span class="sxs-lookup"><span data-stu-id="b233d-101">Learn conditional logic with branch and loop statements</span></span>
metadata:
  title: Branches et boucles – Tutoriel interactif d’introduction à C#
  description: Dans ce didacticiel sur les branches et les boucles, vous allez utiliser votre navigateur pour découvrir C# de manière interactive. Vous allez écrire un code C# et afficher les résultats de la compilation et de l’exécution du code directement dans le navigateur.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: <span data-ttu-id="b233d-105">Collection de listes</span><span class="sxs-lookup"><span data-stu-id="b233d-105">The list collection</span></span>
  ms.openlocfilehash: 0456582fb0aefa9e144b71517b9d8ed619929805
  ms.sourcegitcommit: 205b9a204742e9c77256d43ac9d94c3f82909808
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 09/10/2019
  ms.locfileid: "70850782"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="b233d-106">Ce tutoriel explique comment écrire du code qui examine des variables et modifie le chemin d’exécution en fonction de ces variables.</span><span class="sxs-lookup"><span data-stu-id="b233d-106">This tutorial teaches you how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="b233d-107">Vous utiliserez votre navigateur pour écrire en C# de manière interactive et afficher les résultats de la compilation et de l’exécution de votre code.</span><span class="sxs-lookup"><span data-stu-id="b233d-107">You'll use your browser to write C# interactively and see the results of compiling and running your code.</span></span> <span data-ttu-id="b233d-108">Ce tutoriel comporte une série de leçons visant à explorer les constructions de type branches et boucles en C#.</span><span class="sxs-lookup"><span data-stu-id="b233d-108">This tutorial contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="b233d-109">Ces leçons présentent les concepts de base du langage C#.</span><span class="sxs-lookup"><span data-stu-id="b233d-109">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="b233d-110">Prendre des décisions à l’aide de l’instruction if</span><span class="sxs-lookup"><span data-stu-id="b233d-110">Make decisions using the if statement</span></span>
  durationInMinutes: 4
  content: >
    <span data-ttu-id="b233d-111">Exécutez le code suivant dans la fenêtre interactive.</span><span class="sxs-lookup"><span data-stu-id="b233d-111">Run the following code in the interactive window.</span></span> <span data-ttu-id="b233d-112">Pour ce faire, tapez le bloc de code suivant dans la fenêtre interactive et cliquez sur le bouton **Exécuter** :</span><span class="sxs-lookup"><span data-stu-id="b233d-112">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    <span data-ttu-id="b233d-113">Modifiez la déclaration de `b` pour que la somme soit inférieure à 10 :</span><span class="sxs-lookup"><span data-stu-id="b233d-113">Modify the declaration of `b` so that the sum is less than 10:</span></span>


    ```csharp

    int b = 3;

    ```


    <span data-ttu-id="b233d-114">Cliquez de nouveau sur le bouton **Exécuter**.</span><span class="sxs-lookup"><span data-stu-id="b233d-114">Click the **Run** button again.</span></span> <span data-ttu-id="b233d-115">La réponse étant inférieure à 10, rien ne s’affiche.</span><span class="sxs-lookup"><span data-stu-id="b233d-115">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="b233d-116">La **condition** que vous testez a une valeur false.</span><span class="sxs-lookup"><span data-stu-id="b233d-116">The **condition** you're testing is false.</span></span> <span data-ttu-id="b233d-117">Vous n’avez pas de code à exécuter, car vous avez uniquement écrit l’une des branches possibles pour une instruction `if` : la branche true.</span><span class="sxs-lookup"><span data-stu-id="b233d-117">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>


    > [!TIP]

    > <span data-ttu-id="b233d-118">Durant votre exploration de C# (ou de tout autre langage de programmation), vous commettrez des erreurs d’écriture du code.</span><span class="sxs-lookup"><span data-stu-id="b233d-118">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="b233d-119">Le **compilateur** détectera ces erreurs et vous les signalera.</span><span class="sxs-lookup"><span data-stu-id="b233d-119">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="b233d-120">Si la sortie contient des messages d’erreur, vérifiez attentivement l’exemple de code ainsi que le code dans la fenêtre interactive pour identifier les corrections à apporter.</span><span class="sxs-lookup"><span data-stu-id="b233d-120">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>

    > <span data-ttu-id="b233d-121">Cet exercice vous aidera à mieux comprendre la structure du code C#.</span><span class="sxs-lookup"><span data-stu-id="b233d-121">That exercise will help you learn the structure of C# code.</span></span>


    <span data-ttu-id="b233d-122">Le premier exemple montre la puissance de l’instruction `if` et des types booléens.</span><span class="sxs-lookup"><span data-stu-id="b233d-122">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="b233d-123">Un *booléen* est une variable qui peut avoir l’une des deux valeurs suivantes : `true` ou `false`.</span><span class="sxs-lookup"><span data-stu-id="b233d-123">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="b233d-124">C# définit un type spécial, `bool`, pour les variables booléennes.</span><span class="sxs-lookup"><span data-stu-id="b233d-124">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="b233d-125">L’instruction `if` vérifie la valeur d’un `bool`.</span><span class="sxs-lookup"><span data-stu-id="b233d-125">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="b233d-126">Quand la valeur est `true`, l’instruction qui suit `if` s’exécute.</span><span class="sxs-lookup"><span data-stu-id="b233d-126">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="b233d-127">Dans le cas contraire, elle est ignorée.</span><span class="sxs-lookup"><span data-stu-id="b233d-127">Otherwise, it is skipped.</span></span>


    <span data-ttu-id="b233d-128">Ce processus de vérification des conditions et d’exécution des instructions en fonction de ces conditions est très performant.</span><span class="sxs-lookup"><span data-stu-id="b233d-128">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="b233d-129">Poursuivons notre exploration.</span><span class="sxs-lookup"><span data-stu-id="b233d-129">Let's explore more.</span></span>


    > [!NOTE]

    > <span data-ttu-id="b233d-130">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="b233d-130">This online coding experience is in preview mode.</span></span> <span data-ttu-id="b233d-131">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="b233d-131">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="b233d-132">Utiliser if et else ensemble</span><span class="sxs-lookup"><span data-stu-id="b233d-132">Make if and else work together</span></span>
  durationInMinutes: 10
  content: "\n<span data-ttu-id=\"b233d-133\">Pour exécuter un code différent dans les branches true et false, vous créez une branche `else` qui s’exécute quand la condition a une valeur false.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-133\">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id=\"b233d-134\">Écrivez ce code :</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-134\">Try this:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\n<span data-ttu-id=\"b233d-135\">L’instruction qui suit le mot clé `else` s’exécute uniquement quand la condition testée a une valeur `false`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-135\">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id=\"b233d-136\">La combinaison de `if` et `else` avec des conditions booléennes offre les hautes performances dont vous avez besoin.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-136\">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>\n\n> [!IMPORTANT]\n> <span data-ttu-id=\"b233d-137\">La mise en retrait sous les instructions `if` et `else` a simplement pour but de faciliter la lecture.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-137\">The indentation under the `if` and `else` statements is for human readers.</span></span>\n> <span data-ttu-id=\"b233d-138\">Le langage C# ne considère pas la mise en retrait ou les espaces blancs comme des éléments significatifs.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-138\">The C# language doesn't treat indentation or white space as significant.</span></span>\n> <span data-ttu-id=\"b233d-139\">L’instruction qui suit le mot clé `if` ou `else` sera exécutée en fonction de la condition.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-139\">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id=\"b233d-140\">Tous les exemples de ce tutoriel suivent une pratique courante qui consiste à mettre en retrait les lignes en fonction du flux de contrôle des instructions.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-140\">All the samples in this tutorial follow a common practice to indent lines based on the control flow of statements.</span></span>\n\n<span data-ttu-id=\"b233d-141\">Étant donné que la mise en retrait n’est pas significative, vous devez utiliser `{` et `}` pour indiquer quand vous souhaitez inclure plus d’une instruction dans le bloc qui s’exécute de manière conditionnelle.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-141\">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id=\"b233d-142\">Les programmeurs C# utilisent généralement les accolades pour toutes les clauses `if` et `else`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-142\">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id=\"b233d-143\">L’exemple suivant est identique à ce que vous venez de créer.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-143\">The following example is the same as what you just created.</span></span> <span data-ttu-id=\"b233d-144\">Testez le code.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-144\">Try it.</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> <span data-ttu-id=\"b233d-145\">Dans le reste de ce didacticiel, tous les exemples de code incluent les accolades, conformément aux pratiques acceptées.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-145\">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>\n\n<span data-ttu-id=\"b233d-146\">Vous pouvez tester des conditions plus complexes :</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-146\">You can test more complicated conditions:</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"b233d-147\">Le symbole `==` teste *l’égalité*.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-147\">The `==` symbol tests for *equality*.</span></span> <span data-ttu-id=\"b233d-148\">`==` se distingue du test d’égalité d’attribution, que nous avons vu avec `a = 5`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-148\">Using `==` distinguishes the test for equality from assignment, which you saw in `a = 5`.</span></span>\n\n<span data-ttu-id=\"b233d-149\">`&&` représente « et ».</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-149\">The `&&` represents \"and\".</span></span> <span data-ttu-id=\"b233d-150\">Cela signifie que les deux conditions doivent être true pour que l’instruction s’exécute dans la branche true.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-150\">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id=\"b233d-151\">Ces exemples montrent également que vous pouvez avoir plusieurs instructions dans chaque branche conditionnelle, à condition de les mettre entre `{` et `}`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-151\">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>\n\n<span data-ttu-id=\"b233d-152\">Vous pouvez également utiliser `||` pour représenter « ou » :</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-152\">You can also use  `||` to represent \"or\":</span></span>\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\n<span data-ttu-id=\"b233d-153\">Modifiez les valeurs de `a`, `b` et `c` et passez de `&&` à `||` et inversement.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-153\">Modify the values of `a`, `b`, and `c` and switch between `&&` and `||` to explore.</span></span> <span data-ttu-id=\"b233d-154\">Vous comprendrez mieux comment fonctionnent les opérateurs `&&` et `||`.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-154\">You'll gain more understanding of how the `&&` and `||` operators work.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"b233d-155\">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-155\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"b233d-156\">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"b233d-156\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="b233d-157">Utiliser des boucles pour répéter des opérations</span><span class="sxs-lookup"><span data-stu-id="b233d-157">Use loops to repeat operations</span></span>
  durationInMinutes: 6
  content: >
    <span data-ttu-id="b233d-158">Un autre concept important pour créer des programmes plus volumineux est celui des **boucles**.</span><span class="sxs-lookup"><span data-stu-id="b233d-158">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="b233d-159">Vous allez utiliser des boucles pour répéter des instructions que vous souhaitez exécuter plusieurs fois.</span><span class="sxs-lookup"><span data-stu-id="b233d-159">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="b233d-160">Exécutez le code suivant dans la fenêtre interactive :</span><span class="sxs-lookup"><span data-stu-id="b233d-160">Try this code in the interactive window:</span></span>


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    <span data-ttu-id="b233d-161">L’instruction `while` vérifie une condition et exécute l’instruction qui suit `while`.</span><span class="sxs-lookup"><span data-stu-id="b233d-161">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="b233d-162">Elle répète la vérification de la condition et l’exécution de ces instructions jusqu'à ce que la condition soit false.</span><span class="sxs-lookup"><span data-stu-id="b233d-162">It will repeat checking the condition and executing those statements until the condition is false.</span></span>


    <span data-ttu-id="b233d-163">Cet exemple contient un nouvel opérateur.</span><span class="sxs-lookup"><span data-stu-id="b233d-163">There's one other new operator in this example.</span></span> <span data-ttu-id="b233d-164">`++` après la variable `counter` est l’opérateur d’**incrémentation**.</span><span class="sxs-lookup"><span data-stu-id="b233d-164">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="b233d-165">Il ajoute 1 à la valeur de compteur et stocke cette valeur dans la variable de compteur.</span><span class="sxs-lookup"><span data-stu-id="b233d-165">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>


    > [!IMPORTANT]

    > <span data-ttu-id="b233d-166">Assurez-vous que la condition de boucle `while` ne devienne pas false quand vous exécutez le code.</span><span class="sxs-lookup"><span data-stu-id="b233d-166">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="b233d-167">Dans le cas contraire, vous allez créer une **boucle infinie** dans laquelle votre programme ne se terminera jamais.</span><span class="sxs-lookup"><span data-stu-id="b233d-167">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="b233d-168">Nous n’allons pas le démontrer ici, car le moteur qui exécute votre code expirerait et votre programme n’afficherait aucune sortie.</span><span class="sxs-lookup"><span data-stu-id="b233d-168">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>


    <span data-ttu-id="b233d-169">La boucle `while` teste la condition avant d’exécuter le code qui suit `while`.</span><span class="sxs-lookup"><span data-stu-id="b233d-169">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="b233d-170">La boucle `do` ... `while` exécute d’abord le code, puis vérifie la condition.</span><span class="sxs-lookup"><span data-stu-id="b233d-170">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="b233d-171">Elle ressemble à ce qui suit :</span><span class="sxs-lookup"><span data-stu-id="b233d-171">It looks like this:</span></span>


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    <span data-ttu-id="b233d-172">Cette boucle `do` et la boucle antérieure `while` fonctionnent de manière identique.</span><span class="sxs-lookup"><span data-stu-id="b233d-172">This `do` loop and the earlier `while` loop work the same.</span></span>


    <span data-ttu-id="b233d-173">Passons maintenant à une dernière instruction de boucle.</span><span class="sxs-lookup"><span data-stu-id="b233d-173">Let's move on to one last loop statement.</span></span>


    > [!NOTE]

    > <span data-ttu-id="b233d-174">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="b233d-174">This online coding experience is in preview mode.</span></span> <span data-ttu-id="b233d-175">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="b233d-175">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="b233d-176">Utiliser la boucle for</span><span class="sxs-lookup"><span data-stu-id="b233d-176">Work with the for loop</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="b233d-177">Une autre instruction de boucle commune présente dans le code C# est la boucle `for`.</span><span class="sxs-lookup"><span data-stu-id="b233d-177">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="b233d-178">Exécutez le code suivant dans la fenêtre interactive :</span><span class="sxs-lookup"><span data-stu-id="b233d-178">Try this code in the interactive window:</span></span>


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    <span data-ttu-id="b233d-179">Cette boucle fonctionne de manière identique à la boucle `while` et la boucle `do` que vous avez déjà utilisées.</span><span class="sxs-lookup"><span data-stu-id="b233d-179">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="b233d-180">L’instruction `for` comprend trois parties qui contrôlent son fonctionnement.</span><span class="sxs-lookup"><span data-stu-id="b233d-180">The `for` statement has three parts that control how it works.</span></span>


    <span data-ttu-id="b233d-181">La première partie est l’**initialiseur for** : `int counter = 0;` déclare que `counter` est la variable de boucle et définit sa valeur initiale sur `0`.</span><span class="sxs-lookup"><span data-stu-id="b233d-181">The first part is the **for initializer**: `int counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>


    <span data-ttu-id="b233d-182">La partie centrale est la **condition for** : `counter < 10` déclare que cette boucle `for` continue à s’exécuter tant que la valeur de compteur est inférieure à 10.</span><span class="sxs-lookup"><span data-stu-id="b233d-182">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>


    <span data-ttu-id="b233d-183">La dernière partie est l’**itérateur for** : `counter++` indique comment modifier la variable de boucle après l’exécution du bloc qui suit l’instruction `for`.</span><span class="sxs-lookup"><span data-stu-id="b233d-183">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="b233d-184">Il spécifie ici que `counter` doit être incrémenté de 1 chaque fois que le bloc s’exécute.</span><span class="sxs-lookup"><span data-stu-id="b233d-184">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>


    <span data-ttu-id="b233d-185">Vérifiez-le par vous-même.</span><span class="sxs-lookup"><span data-stu-id="b233d-185">Experiment with these yourself.</span></span> <span data-ttu-id="b233d-186">Réalisez les essais suivants :</span><span class="sxs-lookup"><span data-stu-id="b233d-186">Try each of the following:</span></span>


    - <span data-ttu-id="b233d-187">Modifiez l’initialiseur pour définir le démarrage à une valeur différente.</span><span class="sxs-lookup"><span data-stu-id="b233d-187">Change the initializer to start at a different value.</span></span>

    - <span data-ttu-id="b233d-188">Modifiez la condition pour définir l’arrêt à une valeur différente.</span><span class="sxs-lookup"><span data-stu-id="b233d-188">Change the condition to stop at a different value.</span></span>


    <span data-ttu-id="b233d-189">Une fois terminé, vous allez vous-même écrire des codes pour mettre en pratique ce que vous avez appris.</span><span class="sxs-lookup"><span data-stu-id="b233d-189">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>


    > [!NOTE]

    > <span data-ttu-id="b233d-190">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="b233d-190">This online coding experience is in preview mode.</span></span> <span data-ttu-id="b233d-191">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="b233d-191">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="b233d-192">Combiner des branches et des boucles</span><span class="sxs-lookup"><span data-stu-id="b233d-192">Combine branches and loops</span></span>
  durationInMinutes: 12
  content: >
    <span data-ttu-id="b233d-193">Maintenant que vous avez vu l’instruction `if` et la création de boucles en langage C#, vérifiez si vous pouvez écrire un code C# pour obtenir la somme de tous les entiers de 1 à 20 divisibles par 3.</span><span class="sxs-lookup"><span data-stu-id="b233d-193">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="b233d-194">Voici quelques conseils :</span><span class="sxs-lookup"><span data-stu-id="b233d-194">Here are a few hints:</span></span>


    - <span data-ttu-id="b233d-195">L’opérateur `%` vous donne le reste d’une opération de division.</span><span class="sxs-lookup"><span data-stu-id="b233d-195">The `%` operator gives you the remainder of a division operation.</span></span>

    - <span data-ttu-id="b233d-196">L’instruction `if` vous donne la condition pour vérifier si un nombre doit être inclus dans la somme.</span><span class="sxs-lookup"><span data-stu-id="b233d-196">The `if` statement gives you the condition to see if a number should be part of the sum.</span></span>

    - <span data-ttu-id="b233d-197">La boucle `for` peut vous aider à répéter une série d’étapes pour tous les nombres de 1 à 20.</span><span class="sxs-lookup"><span data-stu-id="b233d-197">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>


    <span data-ttu-id="b233d-198">Essayez par vous-même</span><span class="sxs-lookup"><span data-stu-id="b233d-198">Try it yourself.</span></span> <span data-ttu-id="b233d-199">et vérifiez le résultat.</span><span class="sxs-lookup"><span data-stu-id="b233d-199">Then check how you did.</span></span> <span data-ttu-id="b233d-200">Vous devriez obtenir 63 comme réponse.</span><span class="sxs-lookup"><span data-stu-id="b233d-200">As a hint, you should get 63 for an answer.</span></span>


    > [!NOTE]

    > <span data-ttu-id="b233d-201">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="b233d-201">This online coding experience is in preview mode.</span></span> <span data-ttu-id="b233d-202">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="b233d-202">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="b233d-203">Terminer le test</span><span class="sxs-lookup"><span data-stu-id="b233d-203">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="b233d-204">Avez-vous obtenu un résultat similaire à celui-ci ?</span><span class="sxs-lookup"><span data-stu-id="b233d-204">Did you come up with something like this?</span></span>


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > <span data-ttu-id="b233d-205">Cette expérience de codage en ligne est en mode d’aperçu.</span><span class="sxs-lookup"><span data-stu-id="b233d-205">This online coding experience is in preview mode.</span></span> <span data-ttu-id="b233d-206">Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="b233d-206">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="b233d-207">Félicitations !</span><span class="sxs-lookup"><span data-stu-id="b233d-207">Congratulations!</span></span>
  content: >
    <span data-ttu-id="b233d-208">Vous avez terminé le tutoriel interactif « Branches et boucles ».</span><span class="sxs-lookup"><span data-stu-id="b233d-208">You've completed the "branches and loops" interactive tutorial.</span></span> <span data-ttu-id="b233d-209">Vous pouvez cliquer sur le lien **collection de listes** ci-dessous pour commencer le tutoriel interactif suivant, ou consulter le [site .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) pour télécharger le kit SDK .NET Core, créer un projet sur votre ordinateur et continuer à coder.</span><span class="sxs-lookup"><span data-stu-id="b233d-209">You can click the **list collection** link below to start the next interactive tutorial, or you can visit the [.NET site](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="b233d-210">La section « étapes suivantes » vous ramène à ces didacticiels.</span><span class="sxs-lookup"><span data-stu-id="b233d-210">The "Next steps" section brings you back to these tutorials.</span></span>


    <span data-ttu-id="b233d-211">Pour en savoir plus sur ces concepts, consultez les rubriques suivantes :</span><span class="sxs-lookup"><span data-stu-id="b233d-211">You can learn more about these concepts in these topics:</span></span>


    - [<span data-ttu-id="b233d-212">Instruction if et else</span><span class="sxs-lookup"><span data-stu-id="b233d-212">If and else statement</span></span>](../../language-reference/keywords/if-else.md)

    - [<span data-ttu-id="b233d-213">Instruction while</span><span class="sxs-lookup"><span data-stu-id="b233d-213">While statement</span></span>](../../language-reference/keywords/while.md)

    - [<span data-ttu-id="b233d-214">Instruction do</span><span class="sxs-lookup"><span data-stu-id="b233d-214">Do statement</span></span>](../../language-reference/keywords/do.md)

    - [<span data-ttu-id="b233d-215">Instruction for</span><span class="sxs-lookup"><span data-stu-id="b233d-215">For statement</span></span>](../../language-reference/keywords/for.md)
