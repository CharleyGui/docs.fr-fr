### YamlMime:Tutorial
title: Découvrir la logique conditionnelle avec des instructions de branches et de boucles
metadata:
  title: Branches et boucles – Tutoriel interactif d’introduction à C#
  description: Dans ce didacticiel sur les branches et les boucles, vous allez utiliser votre navigateur pour découvrir C# de manière interactive. Vous allez écrire un code C# et afficher les résultats de la compilation et de l’exécution du code directement dans le navigateur.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: Collection de listes
  ms.openlocfilehash: b0a967ea2e5212887d617e76b4ecb445cfbb8b55
  ms.sourcegitcommit: 8b02d42f93adda304246a47f49f6449fc74a3af4
  ms.translationtype: MT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 04/24/2020
  ms.locfileid: "82135930"
items:
- durationInMinutes: 1
  content: >
    Ce tutoriel explique comment écrire du code qui examine des variables et modifie le chemin d’exécution en fonction de ces variables. Vous utiliserez votre navigateur pour écrire en C# de manière interactive et afficher les résultats de la compilation et de l’exécution de votre code. Ce tutoriel comporte une série de leçons visant à explorer les constructions de type branches et boucles en C#. Ces leçons présentent les concepts de base du langage C#.
- title: Prendre des décisions à l’aide de l’instruction if
  durationInMinutes: 4
  content: >
    Exécutez le code suivant dans la fenêtre interactive. Sélectionnez le bouton **entrer le mode Focus** . Ensuite, tapez le bloc de code suivant dans la fenêtre interactive et sélectionnez **exécuter**:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Si vous exécutez cette procédure sur votre environnement, vous devez suivre les instructions relatives à la [version locale](branches-and-loops-local.md) .


    Modifiez la déclaration de `b` pour que la somme soit inférieure à 10 :


    ```csharp

    int b = 3;

    ```


    Cliquez à nouveau sur le bouton **exécuter** . La réponse étant inférieure à 10, rien ne s’affiche. La **condition** que vous testez a une valeur false. Vous n’avez pas de code à exécuter, car vous avez uniquement écrit l’une des branches possibles pour une instruction `if` : la branche true.


    > [!TIP]

    > Durant votre exploration de C# (ou de tout autre langage de programmation), vous commettrez des erreurs d’écriture du code. Le **compilateur** détectera ces erreurs et vous les signalera. Si la sortie contient des messages d’erreur, vérifiez attentivement l’exemple de code ainsi que le code dans la fenêtre interactive pour identifier les corrections à apporter.

    > Cet exercice vous aidera à mieux comprendre la structure du code C#.


    Le premier exemple montre la puissance de l’instruction `if` et des types booléens. Une *valeur booléenne* est une variable qui peut avoir l’une des deux `true` valeurs `false`suivantes : ou. C# définit un type spécial, `bool`, pour les variables booléennes. L’instruction `if` vérifie la valeur d’un `bool`. Quand la valeur est `true`, l’instruction qui suit `if` s’exécute. Dans le cas contraire, elle est ignorée.


    Ce processus de vérification des conditions et d’exécution des instructions en fonction de ces conditions est très performant. Poursuivons notre exploration.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Utiliser if et else ensemble
  durationInMinutes: 10
  content: "\nPour exécuter un code différent dans les branches true et false, vous créez une branche `else` qui s’exécute quand la condition a une valeur false. Procédez comme suit :\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nL’instruction qui suit le mot clé `else` s’exécute uniquement quand la condition testée a une valeur `false`. La combinaison de `if` et `else` avec des conditions booléennes offre les hautes performances dont vous avez besoin.\n\n> [!IMPORTANT]\n> La mise en retrait sous les instructions `if` et `else` a simplement pour but de faciliter la lecture.\n> Le langage C# ne considère pas la mise en retrait ou les espaces blancs comme des éléments significatifs.\n> L’instruction qui suit le mot clé `if` ou `else` sera exécutée en fonction de la condition. Tous les exemples de ce tutoriel suivent une pratique courante qui consiste à mettre en retrait les lignes en fonction du flux de contrôle des instructions.\n\nÉtant donné que la mise en retrait n’est pas significative, vous devez utiliser `{` et `}` pour indiquer quand vous souhaitez inclure plus d’une instruction dans le bloc qui s’exécute de manière conditionnelle. Les programmeurs C# utilisent généralement les accolades pour toutes les clauses `if` et `else`. L’exemple suivant est identique à ce que vous venez de créer. Testez le code.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Dans le reste de ce didacticiel, tous les exemples de code incluent les accolades, conformément aux pratiques acceptées.\n\nVous pouvez tester des conditions plus complexes :\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\nLe symbole `==` teste *l’égalité*. `==` se distingue du test d’égalité d’attribution, que nous avons vu avec `a = 5`.\n\n`&&` représente « et ». Cela signifie que les deux conditions doivent être true pour que l’instruction s’exécute dans la branche true.  Ces exemples montrent également que vous pouvez avoir plusieurs instructions dans chaque branche conditionnelle, à condition de les mettre entre `{` et `}`.\n\nVous pouvez également utiliser `||` pour représenter « ou » :\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\nModifiez les valeurs de `a`, `b` et `c` et passez de `&&` à `||` et inversement. Vous comprendrez mieux comment fonctionnent les opérateurs `&&` et `||`.\n\n> [!NOTE]\n> Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).\n"
- title: Utiliser des boucles pour répéter des opérations
  durationInMinutes: 6
  content: >
    Un autre concept important pour créer des programmes plus volumineux est celui des **boucles**. Vous allez utiliser des boucles pour répéter des instructions que vous souhaitez exécuter plusieurs fois. Exécutez le code suivant dans la fenêtre interactive :


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    L’instruction `while` vérifie une condition et exécute l’instruction qui suit `while`. Elle répète la vérification de la condition et l’exécution de ces instructions jusqu'à ce que la condition soit false.


    Cet exemple contient un nouvel opérateur. `++` après la variable `counter` est l’opérateur d’**incrémentation**. Il ajoute 1 à la valeur de compteur et stocke cette valeur dans la variable de compteur.


    > [!IMPORTANT]

    > Assurez-vous que la condition de boucle `while` ne devienne pas false quand vous exécutez le code. Dans le cas contraire, vous allez créer une **boucle infinie** dans laquelle votre programme ne se terminera jamais. Nous n’allons pas le démontrer ici, car le moteur qui exécute votre code expirerait et votre programme n’afficherait aucune sortie.


    La boucle `while` teste la condition avant d’exécuter le code qui suit `while`. La boucle `do` ... `while` exécute d’abord le code, puis vérifie la condition. Voici à quoi cela ressemble :


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Cette boucle `do` et la boucle antérieure `while` fonctionnent de manière identique.


    Passons maintenant à une dernière instruction de boucle.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Utiliser la boucle for
  durationInMinutes: 5
  content: >
    Une autre instruction de boucle commune présente dans le code C# est la boucle `for`. Exécutez le code suivant dans la fenêtre interactive :


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Cette boucle fonctionne de manière identique à la boucle `while` et la boucle `do` que vous avez déjà utilisées. L’instruction `for` comprend trois parties qui contrôlent son fonctionnement.


    La première partie est l' **initialiseur**: `int counter = 0;` déclare qui `counter` est la variable de boucle et définit sa valeur initiale sur. `0`


    La partie centrale est la **condition for**: `counter < 10` déclare que cette `for` boucle continue à s’exécuter tant que la valeur du compteur est inférieure à 10.


    La dernière partie est l' **itérateur for**: `counter++` spécifie comment modifier la variable de boucle après l’exécution du bloc `for` après l’instruction. Il spécifie ici que `counter` doit être incrémenté de 1 chaque fois que le bloc s’exécute.


    Vérifiez-le par vous-même. Réalisez les essais suivants :


    - Modifiez l’initialiseur pour définir le démarrage à une valeur différente.

    - Modifiez la condition pour définir l’arrêt à une valeur différente.


    Une fois terminé, vous allez vous-même écrire des codes pour mettre en pratique ce que vous avez appris.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Boucles imbriquées créées
  durationInMinutes: 10
  content: "Une `while`boucle `do` ou `for` peut être imbriquée dans une autre boucle pour créer une matrice à l’aide de la combinaison de chaque élément de la boucle externe avec chaque élément de la boucle interne. Nous allons donc créer un ensemble de paires alphanumériques pour représenter les lignes et les colonnes.\n\nUne `for` seule boucle peut générer les lignes :\n\n```csharp\nfor (int row = 1; row < 11; row++)\n{\n  Console.WriteLine($\"The row is {row}\");\n}\n```\n\nUne autre boucle peut générer les colonnes :\n\n```csharp\nfor (char column = 'a'; column < 'k'; column++)\n{\n  Console.WriteLine($\"The column is {column}\");\n}\n```\n\nVous pouvez imbriquer une boucle à l’intérieur de l’autre pour former des paires :\n  \n```csharp\nfor (int row = 1; row < 11; row++)\n{\n  for (char column = 'a'; column < 'k'; column++)\n  {\n    Console.WriteLine($\"The cell is ({row}, {column})\");\n  }\n}\n```\n\nVous pouvez voir que la boucle externe incrémente une fois pour chaque exécution complète de la boucle interne. Inversez l’imbrication de lignes et de colonnes et observez les modifications pour vous-même.\n"
- title: Combiner des branches et des boucles
  durationInMinutes: 12
  content: >
    Maintenant que vous avez vu l’instruction `if` et la création de boucles en langage C#, vérifiez si vous pouvez écrire un code C# pour obtenir la somme de tous les entiers de 1 à 20 divisibles par 3.  Voici quelques conseils :


    - L’opérateur `%` vous donne le reste d’une opération de division.

    - L’instruction `if` vous donne la condition pour vérifier si un nombre doit être inclus dans la somme.

    - La boucle `for` peut vous aider à répéter une série d’étapes pour tous les nombres de 1 à 20.


    Essayez par vous-même et vérifiez le résultat. Vous devriez obtenir 63 comme réponse.


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Terminer le test
  durationInMinutes: 1
  content: >
    Avez-vous obtenu un résultat similaire à celui-ci ?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```


    > [!NOTE]

    > Cette expérience de codage en ligne est en mode d’aperçu. Si vous rencontrez des problèmes, veuillez les signaler [sur le référentiel dotnet/try](https://github.com/dotnet/try/issues).
- title: Félicitations !
  content: >
    Vous avez terminé le tutoriel interactif « Branches et boucles ». Vous pouvez sélectionner le lien de **regroupement de listes** ci-dessous pour démarrer le didacticiel interactif suivant, ou vous pouvez visiter le [site .net](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) pour télécharger le kit SDK .net Core, créer un projet sur votre ordinateur et conserver le codage. La section « étapes suivantes » vous ramène à ces didacticiels.


    Pour en savoir plus sur ces concepts, consultez les rubriques suivantes :


    - [Instruction if et else](../../language-reference/keywords/if-else.md)

    - [Instruction while](../../language-reference/keywords/while.md)

    - [Instruction do](../../language-reference/keywords/do.md)

    - [Instruction for](../../language-reference/keywords/for.md)
