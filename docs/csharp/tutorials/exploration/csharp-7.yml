### YamlMime:Tutorial
title: Explorer C# 7.0 - Tutoriel C# interactif
metadata:
  title: Explorer C# 7.0 - Essayer les nouvelles fonctionnalités de C# 7.0 de manière interactive à l’aide d’un navigateur
  description: Dans ce tutoriel, vous allez utiliser votre navigateur pour explorer C# 7.0 de manière interactive. Vous allez découvrir les nouveaux idiomes que vous pouvez utiliser avec C# 7.0 pour créer du code plus concis et plus lisible.
  audience: Developer
  level: intermediate
  ms.date: 03/20/2019
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 7cec35e0749ea0b38162244171459f311d27cb25
  ms.sourcegitcommit: a8d3504f0eae1a40bda2b06bd441ba01f1631ef0
  ms.translationtype: HT
  ms.contentlocale: fr-FR
  ms.lasthandoff: 06/18/2019
  ms.locfileid: "67170226"
items:
- durationInMinutes: 1
  content: >
    Ce tutoriel vous permet d’explorer les fonctionnalités C# 7.0 de manière interactive, en utilisant votre navigateur pour écrire en C# et voir les résultats de la compilation et de l’exécution de votre code. Il contient une série de leçons qui modifient les pratiques antérieures propres à C# et mettent en avant les fonctionnalités plus récentes et plus concises de C# 7.0. La suite de cet article fournit une vue d’ensemble de ces fonctionnalités, avec des liens pour explorer chacune d’entre elles.
- title: Déclarations de variable de sortie à l’emplacement de l’assignation
  durationInMinutes: 2
  content: "La syntaxe existante qui prend en charge les paramètres `out` a été améliorée dans cette version. Cliquez sur le bouton *Entrer en mode focalisation* au bas de cette page, puis essayez le code suivant dans la fenêtre interactive : \n\n[!code-csharp[OutVariableOldStyle](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableOldStyle \"classic out variable declaration\")]\n\nVous pouvez désormais déclarer des variables `out` dans la liste d’arguments d’un appel de méthode, au lieu d’écrire une instruction de déclaration distincte. Vous pouvez déplacer la déclaration dans l’appel de méthode. Ajoutez le code suivant au bas de la fenêtre interactive :\n\n[!code-csharp[OutVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVariableDeclarations \"Out variable declarations\")]\n\nVous pouvez remplacer la déclaration `int` par une déclaration `var`. Ajoutez le code suivant à la fenêtre interactive :\n\n[!code-csharp[OutVarVariableDeclarations](~/samples/snippets/csharp/new-in-7/program.cs#OutVarVariableDeclarations \"Implicitly typed Out variable\")]\n\nLa nouvelle syntaxe offre deux avantages importants par rapport à la syntaxe existante :\n\n* Le code est plus facile à lire. \n    - Vous déclarez la variable out à l’endroit où vous l’utilisez, et non pas sur une autre ligne au-dessus.\n* Il n’est pas nécessaire d’assigner une valeur initiale.\n    - En déclarant la variable `out` à l’endroit où elle est utilisée dans un appel de méthode, vous ne pouvez pas l’utiliser accidentellement avant qu’elle soit assignée.\n\nL’étendue de la variable déclarée correspond à l’étendue qui englobe l’instruction `if`. Cela vous permet d’utiliser la variable par la suite. Modifiez le dernier bloc `if` comme indiqué dans l’extrait de code suivant.\n\n```csharp\nif (!int.TryParse(input, out int result))\n{    \n    return null;\n}\n\nConsole.WriteLine(result);\n```\n"
- title: Les tuples créent des structures de données légères.
  durationInMinutes: 1
  content: "Les tuples sont des structures de données légères contenant plusieurs champs pour représenter les membres de données. Les champs ne sont pas validés et vous ne pouvez pas définir vos propres méthodes.\n\n> [!NOTE]\n> Les tuples étaient disponibles avant C# 7.0, mais ils n’étaient pas efficaces et n’avaient aucune prise en charge du langage. Cela signifiait que les éléments tuples pouvaient uniquement être référencés comme `Item1`, `Item2`, et ainsi de suite. C# 7.0 introduit la prise en charge du langage pour les tuples, ce qui permet d’utiliser des noms sémantiques pour les champs d’un tuple avec de nouveaux types tuple plus efficaces.\n\nVous pouvez créer un tuple en assignant une valeur à chaque membre nommé :\n\n[!code-csharp[NamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#NamedTuple \"Named tuple\")]\n\nLe tuple `namedLetters` contient des champs appelés `Alpha` et `Beta`. Ces noms existent uniquement au moment de la compilation et ne sont pas conservés au moment de l’exécution (lors de l’inspection du tuple par réflexion, par exemple).\n\nDans une assignation de tuple, vous pouvez également spécifier les noms des champs dans la partie droite : \n\n[!code-csharp[ImplicitNamedTuple](~/samples/snippets/csharp/new-in-7/program.cs#ImplicitNamedTuple \"Implicitly named tuple\")]\n\nVous pouvez spécifier des noms pour les champs à la fois sur le côté gauche et droit de l’assignation, mais les noms sur le côté droit sont ignorés.\n\nCes derniers sont surtout utiles comme types de retour pour les méthodes `private` et `internal`. Les tuples fournissent une syntaxe simple pour que ces méthodes retournent plusieurs valeurs discrètes.\n\nLa création d’un tuple est plus efficace et plus productive que celle d’une classe ou d’un struct. La syntaxe d’un typle est plus simple et légère pour définir une structure de données qui comporte plusieurs valeurs. L’exemple de méthode ci-dessous retourne les valeurs minimale et maximale trouvées dans une séquence d’entiers. Ajoutez le code suivant dans votre navigateur pour l’essayer :\n\n[!code-csharp[TupleReturningMethod](~/samples/snippets/csharp/new-in-7/program.cs#TupleReturningMethod \"Tuple returning method\")]\n\nDans certains cas, vous pouvez souhaiter décompresser les membres d’un tuple qui ont été retournés à partir d’une méthode.  Pour ce faire, déclarez des variables distinctes pour chacune des valeurs dans le tuple. Cette opération est appelée *déconstruction* du tuple. Ajoutez le code suivant dans votre navigateur pour l’essayer :\n\n[!code-csharp[CallingWithDeconstructor](~/samples/snippets/csharp/new-in-7/program.cs#CallingWithDeconstructor \"Deconstructing a tuple\")]\n\nÀ l’usage, vous vous rendrez compte que vous n’utilisez pas tous les membres d’un résultat de tuple. Le cas échéant, vous pouvez ignorer une ou plusieurs des valeurs retournées à l’aide de `_` à la place d’une variable. Ajoutez le code suivant dans votre navigateur pour l’essayer :\n\n[!code-csharp[DiscardTupleMember](~/samples/snippets/csharp/new-in-7/program.cs#DiscardMember \"Discard a tuple member\")]\n\nVous pouvez approfondir vos connaissances sur les tuples avec [cet article](../../tuples.md).\nVous pouvez approfondir vos connaissances sur les éléments ignorés avec [cet article](../../discards.md).\n"
- title: Utiliser le modèle de type avec l’expression is
  durationInMinutes: 2
  content: >
    L’expression de modèle `is` étend l’[opérateur `is`](../../language-reference/keywords/is.md#pattern-matching-with-is) classique pour interroger un objet au-delà de son type.


    Essayez le code suivant dans votre fenêtre de navigateur :


    [!code-csharp[SimpleIs](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleIsPattern "Simple Is pattern")]


    Remplacez la déclaration de variable par une chaîne :


    ```csharp

    object count = "5";

    ```


    À présent, l’expression `is` a la valeur false, donc la branche `else` est exécutée. Essayez de remplacer `count` par `number` dans la branche else :


    ```csharp

    Console.WriteLine($"{number} is not an integer");

    ```


    Le code ci-dessus n’est pas compilé, car `number` n’est pas assigné dans la branche `else`. Il est attribué uniquement dans la branche `true` de l’instruction `if`.


    Le modèle de type d’expression `is` est utile quand vous avez un petit nombre de types pour le test. Souvent, vous pouvez avoir besoin de tester plusieurs types. Ce qui requiert l’instruction `switch` de critères spéciaux.
- title: Critères spéciaux dans l’instruction switch
  durationInMinutes: 2
  content: >
    L’*expression de correspondance* a une syntaxe familière, basée sur l’instruction `switch` qui fait déjà partie du langage C#. Commençons par un petit exemple basé sur la syntaxe d’expression `is` que vous avez explorée à la page précédente :


    [!code-csharp[SimpleSwitch](~/samples/snippets/csharp/new-in-7/patternmatch.cs#SimpleSwitchPattern "simple switch")]


    Le code précédent recherche un `int` ou `null`. Un type sur deux a atteint le cas par défaut. Ajoutez les deux lignes suivantes pour vérifier le comportement :


    [!code-csharp[AddLongCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestLong "Add a case for long")]


    L’expression `switch` convertit un type nullable en son type correspondant. Ajoutez le code suivant pour vérifier :


    [!code-csharp[NullableCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#NullableSwitch "Add a nullable case")]


    Vous pouvez ajouter autant d’autres expressions de modèle de type aux instructions switch. Ajoutez-les avant le cas `null` :


    [!code-csharp[MoreTypeCases](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreCases "Add more type cases")]


    Vérifiez qu’elles fonctionnent en ajoutant les tests suivants :


    [!code-csharp[AddMoreTests](~/samples/snippets/csharp/new-in-7/patternmatch.cs#MoreTests "Add more type tests")]


    Les expressions de correspondance prennent également en charge les constantes. Cela peut faire gagner du temps en éliminant les cas simples :


    [!code-csharp[ConstantCase](~/samples/snippets/csharp/new-in-7/patternmatch.cs#ConstantCase "Add a constant case")]


    Vous devez ajouter le cas précédent *avant* l’expression `case int:`. Si vous l’ajoutez après ce cas, le compilateur vous avertit qu’il a déjà été géré par un cas précédent.


    Vous pouvez ajouter une clause `when` à n’importe quel cas de modèle pour pouvoir tester d’autres conditions au-delà d’un type ou d’une valeur constante. Essayez-la en ajoutant le cas suivant au-dessus du cas `string` général :


    [!code-csharp[WhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#WhenClause "Add a when clause")]


    Faites le test avec quelque chose comme le code suivant :


    [!code-csharp[TestWhenClause](~/samples/snippets/csharp/new-in-7/patternmatch.cs#TestWhenClause "Test the when clause")]


    La nouvelle syntaxe des expressions de critères spéciaux facilite la création d’algorithmes de répartition en utilisant une syntaxe claire et concise basée sur le type ou d’autres propriétés d’un objet. Les expressions de critères spéciaux permettent ces constructions sur les types de données qui ne sont pas liés par héritage.


    Pour plus d’informations sur les critères spéciaux, consultez l’article dédié aux [critères spéciaux en C#](../../pattern-matching.md).
- title: Optimiser le stockage en mémoire à l’aide de variables locales et retours ref
  durationInMinutes: 2
  content: >
    Cette fonctionnalité active les algorithmes qui utilisent et retournent des références à des variables définies ailleurs. Un seul exemple fait intervenir des matrices de grande taille et la recherche d’un emplacement unique correspondant à certaines caractéristiques. Une seule méthode retournerait les deux index à un emplacement unique dans la matrice :


    [!code-csharp[EverythingByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#EverythingByValue "return indices by value")]


    Vous pouvez tester cette méthode en utilisant le code suivant :


    [!code-csharp[TestByValue](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByValue "test code for return indices by value")]



    Cette méthode `Find` retourne les index de l’élément dans la matrice. Cela conduit les appelants à écrire du code qui utilise ces index pour déréférencer la matrice et modifier un seul élément. Il est préférable d’écrire une méthode qui retourne une *référence* à l’élément de la matrice que vous voulez changer.


    Examinons en détail une série de changements pour illustrer la fonctionnalité de variable locale de référence et montrer comment créer une méthode qui retourne une référence à un stockage interne. Tout au long du processus, vous allez apprendre les règles des fonctionnalités de variable locale de référence et de retour de référence qui vous protègent contre toute mauvaise utilisation accidentelle.


    Commencez par modifier la déclaration de méthode `Find` pour qu’elle retourne un `ref int` au lieu d’un tuple.


    ```csharp

    ref int Find(int[,] matrix, Func<int, bool> predicate)

    ```


    Modifiez l’instruction return pour retourner l’élément au niveau des index corrects :


    ```csharp

    return matrix[i,j];

    ```


    Modifiez le retour final pour lever plutôt une exception :


    ```csharp

    throw new InvalidOperationException("Not found");

    ```


    Notez que ce code ne se compile pas. La déclaration de méthode indique un retour `ref`, alors que l’instruction return spécifie un retour de valeur. Vous devez ajouter le mot clé `ref` à chaque instruction return. Cela indique un retour par référence, et permet aux développeurs qui lisent le code ultérieurement de ne pas oublier que la méthode effectue un retour par référence :


    ```csharp

    return ref matrix[i,j];

    ```


    Maintenant que la méthode retourne une référence à la valeur entière dans la matrice, vous devez modifier l’emplacement où elle est appelée. La déclaration `var` signifie que `valItem` est désormais un `int` au lieu d’un tuple. Remplacez le code appelant par le suivant :


    ```csharp

    var valItem = Find(matrix, (val) => val == 42);

    Console.WriteLine(valItem);

    valItem = 24;

    Console.WriteLine(matrix[4, 2]);

    ```


    La deuxième instruction `WriteLine` dans l’exemple ci-dessus affiche la valeur `42`, et non la valeur `24`. La variable `valItem` est un `int`, et non un `ref int`. Le mot clé `var` permet au compilateur de spécifier le type, mais il n’ajoutera pas implicitement le modificateur `ref`. Au lieu de cela, la valeur référencée par `ref return` est *copiée* dans la variable dans la partie gauche de l’assignation. La variable n’est pas une variable `ref` locale.


    Afin de modifier la référence retournée, vous devez ajouter le modificateur `ref` à la déclaration de variable locale et avant l’appel à `Find` pour faire de la variable une référence quand la valeur de retour est une référence. Modifiez le code de test dans votre navigateur pour qu’il corresponde au suivant :


    [!code-csharp[TestByRef](~/samples/snippets/csharp/new-in-7/MatrixSearch.cs#TestByRef "test code for return object by reference")]


    À présent, la seconde instruction `WriteLine` dans l’exemple ci-dessus imprime la valeur `24`, indiquant que le stockage dans la matrice a été modifié. La variable locale a été déclarée avec le modificateur `ref`, et elle prendra un retour `ref`. Vous devez initialiser une variable `ref` au moment de sa déclaration ; vous ne pouvez pas séparer la déclaration et l’initialisation.


    Le langage C# a trois autres règles qui vous protègent contre une mauvaise utilisation des variables locales et des retours `ref` :


    * Vous ne pouvez pas affecter une valeur de retour de méthode standard à une variable locale `ref`.

    * Vous ne pouvez pas retourner un `ref` à une variable dont la durée de vie ne s’étend pas au-delà de l’exécution de la méthode.

    * Les variables locales et les retours `ref` ne peuvent pas être utilisés avec les méthodes Async.


    L’ajout de variables locales ref et de retours ref permet d’utiliser des algorithmes qui sont plus efficaces en évitant la copie de valeurs ou d’effectuer plusieurs fois des opérations de déréférencement.


    Pour plus d'informations, voir l’article [ref, mot clé](../../language-reference/keywords/ref.md).
- title: Réduire l’accès au code avec des fonctions locales
  durationInMinutes: 2
  content: "Vous pouvez à présent déclarer des fonctions locales qui sont imbriquées dans d’autres fonctions. Cela vous permet de réduire la visibilité de ces fonctions. Il existe trois cas d’usage évidents pour les fonctions locales :\n\n- Fonctions récursives.\n- Méthodes d’itérateur.\n- Méthodes asynchrones.\n\nCommençons par les méthodes récursives. Essayez le code suivant dans le navigateur pour calculer `6!` (factorielle) :\n\n```csharp\nint LocalFunctionFactorial(int n)\n{\n    return nthFactorial(n);\n\n    int nthFactorial(int number) => (number < 2) ? \n        1 : number * nthFactorial(number - 1);\n}\n\nConsole.WriteLine(LocalFunctionFactorial(6));\n```\n\nLes fonctions locales sont un excellent moyen d’implémenter des algorithmes récursifs. D’autres utilisations courantes concernent les méthodes d’itérateur publiques et les méthodes asynchrones publiques. Ces deux types de méthodes génèrent du code qui signale les erreurs plus tard que ce qu’attendent les programmeurs. Dans le cas des méthodes iterator, toute exception est observée uniquement lors de l’appel de code qui énumère la séquence retournée. Dans le cas des méthodes async, toute exception est observée uniquement quand le `Task` retourné est attendu.\n\nLes méthodes d’itérateur sont plus faciles à explorer dans le navigateur, nous allons donc les utiliser dans cette exploration. Essayez le code suivant qui appelle une méthode d’itérateur dans votre navigateur :\n\n[!code-csharp[IteratorMethod](~/samples/snippets/csharp/new-in-7/Iterator.cs#SnippetIteratorMethod \"Iterator method\")]\n\nExécutez le code. Remarquez que l’exception est levée quand le code commence à itérer le deuxième jeu de résultats. Le code qui itère le premier jeu de résultats a déjà été exécuté. Cet exemple est petit et ne change pas les structures de données, il est donc inoffensif et facile à corriger. Mais, dans un programme plus important, où les deux objets itérateur peuvent être créés dans des méthodes enfants différentes, la cause racine peut être difficile à trouver. Si la première méthode d’itérateur a changé l’état des données, cela peut même entraîner une altération des données. Vous préféreriez que l’exception soit immédiatement levée, avant qu’un travail quelconque soit effectué. Vous pouvez refactoriser le code afin que la méthode publique valide tous les arguments et qu’une fonction locale effectue l’énumération :\n\n[!code-csharp[IteratorMethodRefactored](~/samples/snippets/csharp/new-in-7/Iterator.cs#IteratorMethodLocalInteractive \"Iterator method refactored\")]\n\nLa version précédente indique clairement que la méthode locale est référencée uniquement dans le contexte de la méthode externe. Les règles relatives aux fonctions locales peuvent également garantir qu’un développeur ne peut pas appeler accidentellement la fonction locale à partir d’un autre emplacement dans la classe et ignorer la validation d’argument.\n\nIl est possible d’utiliser la même technique avec les méthodes `async` pour garantir que les exceptions résultant de la validation d’argument sont levées avant le début de la tâche asynchrone.\n\n> [!NOTE]\n> Certaines des conceptions prises en charge par les fonctions locales peuvent également être effectuées à l’aide d’*expressions lambda*. Si cela vous intéresse, [reportez-vous aux informations supplémentaires décrivant ce qui différencie ces deux processus](../../local-functions-vs-lambdas.md).\n"
- content: >
    Vous avez terminé l’exploration des nouvelles fonctionnalités majeures en C# 7. Essayez-les à présent par vous-même dans vos applications. Vous pouvez voir la liste complète dans l’article sur les [nouveautés de C# 7](../../whats-new/csharp-7.md).
